# External modules
import os
from OpenGL.GL import *

# Internal modules
from view.transform import identity

from objects.vertex_array import VertexArray
from objects.vertex_buffer import VertexBuffer
from objects.index_buffer import IndexBuffer
from objects.texture import Texture


def render(MVP, shader, vertex_array, index_buffer, mod=GL_TRIANGLES):
    shader.bind()
    vertex_array.bind()
    index_buffer.bind()

    shader.set_mvp(MVP)
    glDrawElements(mod, index_buffer.size, GL_UNSIGNED_INT, None)


class Object:

    def __init__(self, vertices, indices):

        self.mod = GL_TRIANGLES
        self.model = identity()

        self.vertex_array = VertexArray()
        self.buffers = [VertexBuffer(vertices)]
        self.vertex_array.add_buffer(self.buffers[0], 3, index=0)

        self.index_buffer = IndexBuffer(indices)

        # cleanup
        self.vertex_array.unbind()
        self.index_buffer.unbind()

        self.textured = False

    def draw(self, pv_mat, shader):
        mvp = pv_mat @ self.model
        if self.textured:
            self.texture.bind()

        render(mvp, shader, self.vertex_array, self.index_buffer, self.mod)


    def add_buffer(self, array, n, index):
        print("adding new buffer :", array)
        self.vertex_array.bind()
        self.buffers += [VertexBuffer(array)]
        self.vertex_array.add_buffer(self.buffers[-1], 3, 1)

    def set_texture(self, filename, reversed=False):
        self.textured = True
        self.texture = Texture(filename, reversed)


class ModelObject:

    def __init__(self, model_path, texture_path):
        self.load_obj(model_path)

    def load_obj(self, filename):
        vertices = list()
        textures = list()
        normals = list()

        model = list()

        source_dir = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
        with open(os.path.join(source_dir, filename), 'r') as file:
            lines = file.read().split('\n')
            for line in lines:
                print(line)
                if line.startswith('v '):
                    coords = line.split(' ')
                    vertex = (coords[1], coords[2], coords[3])
                    vertices.append(vertex)
                if line.startswith('vt '):
                    coords = line.split(' ')
                    texture = (coords[1], coords[2])
                    textures.append(texture)
                if line.startswith('vn '):
                    coords = line.split(' ')
                    normal = (coords[1], coords[2])
                if line.startswith('f '):
                    faces = line.split(' ')
                    for i in range(1, 4):
                        components = faces[i].split('/')


        print(vertices, textures, normals)
